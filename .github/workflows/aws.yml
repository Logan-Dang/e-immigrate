on:
  push:
    branches:
      - master
  # In the future we want to use release/tags
  # release:
  #   types: # This configuration does not affect the page_build event above
  #     - created

name: Deploy to Amazon Elastic Container Service

jobs:
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest

    # un-comment to additional logs to debug
    steps:
    - name: Debug Action
      uses: hmarr/debug-action@v1.0.0
      
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Set ECR repository
      id: ecr-repository
      env:
        ECR_REPOSITORY: e-immigrate-client-dev
      run: echo "::set-output name=repo::${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY"

    - uses: docker/setup-buildx-action@v1
      with:
        driver: docker
        
    - name: Client - build, tag, and psh image to ECR
      id: docker_build
      uses: docker/build-push-action@v2
      # env:
      #   ECR_REPOSITORY: e-immigrate-client-dev
      with:
        # registry: ${{ steps.login-ecr.outputs.registry }}
        # repository: $ECR_REPOSITORY
        context: .
        file: AWS-Deployment/client/Dockerfile
        push: true
        tags: |
          ${{ steps.ecr-repository.outputs.repo }}:${{ github.sha }}
          ${{ steps.ecr-repository.outputs.repo }}:latest

    # - name: CLIENT - Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REPOSITORY: ${{ steps.ecr-repository.outputs.repo }}
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and
    #     # push it to ECR so that it can
    #     # be deployed to ECS.
    #     docker build -t $ECR_REPOSITORY:$IMAGE_TAG -f AWS-Deployment/client/Dockerfile .
    #     docker push $ECR_REPOSITORY:$IMAGE_TAG
    #     echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"


    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-definition
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: AWS-Deployment/client/task-definition.json
        # image: ${{ steps.ecr-repository.outputs.repo }}/${{ steps.docker_build.outputs.digest }}
        container-name: e-immigrate-client-dev-container
        image: ${{ steps.ecr-repository.outputs.repo }}:${{ github.sha }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-definition.outputs.task-definition }}
        service: e-immigrate-client-dev
        cluster: multi-tenant-dev
        wait-for-service-stability: true
        wait-for-minutes: 5 minutes


  # Backend Currently Not online
  # deploy-backend:
  #   name: Deploy Backend API
  #   needs: setup

  #   - name: CLIENT - Build, tag, and push image to Amazon ECR
  #     id: build-image
  #     env:
  #       ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #       ECR_REPOSITORY: e-immigrate-api-dev
  #       IMAGE_TAG: ${{ github.sha }}
  #     run: |
  #       # Build a docker container and
  #       # push it to ECR so that it can
  #       # be deployed to ECS.
  #       docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f AWS-Deployment/client/Dockerfile .
  #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #       echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  #   - name: Fill in the new image ID in the Amazon ECS task definition
  #     id: task-def
  #     uses: aws-actions/amazon-ecs-render-task-definition@v1
  #     with:
  #       task-definition: AWS-Deployment/client/task-definition.json
  #       container-name: open-disclosure-client-dev-container
  #       image: ${{ steps.build-image.outputs.image }}

  #   - name: Deploy Amazon ECS task definition
  #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #     with:
  #       task-definition: ${{ steps.task-def.outputs.task-definition }}
  #       service: e-immigrate-client
  #       cluster: CFSJ-ECS-Cluster
  #       wait-for-service-stability: true

  # deploy-frontend:
  #   name: Deploy Frontend app
  #   runs-on: ubuntu-latest

    # - name: CLIENT - Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REPOSITORY: ${{ steps.ecr-repository.outputs.repo }}
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and
    #     # push it to ECR so that it can
    #     # be deployed to ECS.
    #     docker build -t $ECR_REPOSITORY:$IMAGE_TAG -f AWS-Deployment/client/Dockerfile .
    #     docker push $ECR_REPOSITORY:$IMAGE_TAG
    #     echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"